par(mfrow=c(1,1), oma=c(1,1,1,1), mar = c(1,4,1,1))
#plot empty area
plot(x[,10], x[,7], type="n", ylab="Energy sub metering", xlab="")
#post datale
lines(x[,10], x[,7])
lines(x[,10], x[,8], col = "red")
lines(x[,10], x[,9], col = "blue")
#draw legend
legend("topright",lty=1,col= c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.copy(png,'plot3.png', width=480, height=480, res=72)
dev.off()
##initial data loading part
#read given file
x <- read.table("feb_household.txt", header = FALSE, sep = ";")
#convert first column to R date object
x[,1]<-as.Date(x[,1], "%d/%m/%Y")
#read time as R time object along with date
d <- paste(x[,1], x[,2])
d <-strptime(d, "%Y-%m-%d %H:%M:%S")
#adding empty column
x[,"datetime"]<- NA
#one shot to skip line 6,7
x$datetime <- strptime(paste(x[,1],x[,2]), "%Y-%m-%d %H:%M:%S")
#initial data loading part ends
par(mfrow=c(1,1), oma=c(1,1,1,1), mar = c(1,4,1,1))
#plot empty area
plot(x[,10], x[,7], type="n", ylab="Energy sub metering", xlab="")
#post datale
lines(x[,10], x[,7])
lines(x[,10], x[,8], col = "red")
lines(x[,10], x[,9], col = "blue")
#draw legend
legend("topright",lty=1,col= c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.copy(png,'plot3.png', width=480, height=480, res=45)
dev.off()
##initial data loading part
#read given file
x <- read.table("feb_household.txt", header = FALSE, sep = ";")
#convert first column to R date object
x[,1]<-as.Date(x[,1], "%d/%m/%Y")
#read time as R time object along with date
d <- paste(x[,1], x[,2])
d <-strptime(d, "%Y-%m-%d %H:%M:%S")
#adding empty column
x[,"datetime"]<- NA
#one shot to skip line 6,7
x$datetime <- strptime(paste(x[,1],x[,2]), "%Y-%m-%d %H:%M:%S")
#initial data loading part ends
par(mfrow=c(2,2), mar = c(4,4,1,1), oma = c(1,2,1,1))
#base plot
#plot 1
plot(x[,10], x[,3], ylab="Global Active Power", type="n", xlab="")
lines(x[,10], x[,3])
#plot 2
plot(x[,10], x[,5], ylab="Voltage", xlab="datetime", type="n")
lines(x[,10], x[,5])
#plot 3
plot(x[,10], x[,7], ylab="Energy sub metering", type="n", xlab="")
lines(x[,10], x[,7])
lines(x[,10], x[,8], col = "red")
lines(x[,10], x[,9], col = "blue")
#draw legend
legend("topright",lty=1,col= c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), bty="n")
#plot 4
plot(x[,10], x[,4], ylab="Global_reactive_power", xlab="datetime", type="n")
#draw lines
lines(x[,10], x[,4])
dev.copy(png,'plot4.png', width=480, height=480, res=45)
dev.off()
##initial data loading part
#read given file
x <- read.table("feb_household.txt", header = FALSE, sep = ";")
#convert first column to R date object
x[,1]<-as.Date(x[,1], "%d/%m/%Y")
#read time as R time object along with date
d <- paste(x[,1], x[,2])
d <-strptime(d, "%Y-%m-%d %H:%M:%S")
#adding empty column
x[,"datetime"]<- NA
#one shot to skip line 6,7
x$datetime <- strptime(paste(x[,1],x[,2]), "%Y-%m-%d %H:%M:%S")
#initial data loading part ends
par(mfrow=c(2,2), mar = c(4,4,1,1), oma = c(1,2,1,1))
#base plot
#plot 1
plot(x[,10], x[,3], ylab="Global Active Power", type="n", xlab="")
lines(x[,10], x[,3])
#plot 2
plot(x[,10], x[,5], ylab="Voltage", xlab="datetime", type="n")
lines(x[,10], x[,5])
#plot 3
plot(x[,10], x[,7], ylab="Energy sub metering", type="n", xlab="")
lines(x[,10], x[,7])
lines(x[,10], x[,8], col = "red")
lines(x[,10], x[,9], col = "blue")
#draw legend
legend("topright",lty=1,col= c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), bty="n")
#plot 4
plot(x[,10], x[,4], ylab="Global_reactive_power", xlab="datetime", type="n")
#draw lines
lines(x[,10], x[,4])
dev.copy(png,'plot4.png', width=480, height=480, res=60)
dev.off()
par(xpd=FALSE)
##initial data loading part
#read given file
x <- read.table("feb_household.txt", header = FALSE, sep = ";")
#convert first column to R date object
x[,1]<-as.Date(x[,1], "%d/%m/%Y")
#read time as R time object along with date
d <- paste(x[,1], x[,2])
d <-strptime(d, "%Y-%m-%d %H:%M:%S")
#adding empty column
x[,"datetime"]<- NA
#one shot to skip line 6,7
x$datetime <- strptime(paste(x[,1],x[,2]), "%Y-%m-%d %H:%M:%S")
#initial data loading part ends
par(mfrow=c(2,2), mar = c(4,4,1,1), oma = c(1,2,1,1))
#base plot
#plot 1
plot(x[,10], x[,3], ylab="Global Active Power", type="n", xlab="")
lines(x[,10], x[,3])
#plot 2
plot(x[,10], x[,5], ylab="Voltage", xlab="datetime", type="n")
lines(x[,10], x[,5])
#plot 3
plot(x[,10], x[,7], ylab="Energy sub metering", type="n", xlab="")
lines(x[,10], x[,7])
lines(x[,10], x[,8], col = "red")
lines(x[,10], x[,9], col = "blue")
#draw legend
legend("topright",lty=1,col= c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), bty="n")
#plot 4
plot(x[,10], x[,4], ylab="Global_reactive_power", xlab="datetime", type="n")
#draw lines
lines(x[,10], x[,4])
dev.copy(png,'plot4.png', width=480, height=480, res=60)
dev.off()
##initial data loading part
#read given file
x <- read.table("feb_household.txt", header = FALSE, sep = ";")
#convert first column to R date object
x[,1]<-as.Date(x[,1], "%d/%m/%Y")
#read time as R time object along with date
d <- paste(x[,1], x[,2])
d <-strptime(d, "%Y-%m-%d %H:%M:%S")
#adding empty column
x[,"datetime"]<- NA
#one shot to skip line 6,7
x$datetime <- strptime(paste(x[,1],x[,2]), "%Y-%m-%d %H:%M:%S")
#initial data loading part ends
par(mfrow=c(1,1), oma=c(1,1,1,1), mar = c(1,4,1,1))
#plot empty area
plot(x[,10], x[,7], type="n", ylab="Energy sub metering", xlab="")
#post datale
lines(x[,10], x[,7])
lines(x[,10], x[,8], col = "red")
lines(x[,10], x[,9], col = "blue")
#draw legend
legend("topright",lty=1,col= c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.copy(png,'plot3.png', width=480, height=480, res=60)
dev.off()
##initial data loading part
#read given file
x <- read.table("feb_household.txt", header = FALSE, sep = ";")
#convert first column to R date object
x[,1]<-as.Date(x[,1], "%d/%m/%Y")
#read time as R time object along with date
d <- paste(x[,1], x[,2])
d <-strptime(d, "%Y-%m-%d %H:%M:%S")
#adding empty column
x[,"datetime"]<- NA
#one shot to skip line 6,7
x$datetime <- strptime(paste(x[,1],x[,2]), "%Y-%m-%d %H:%M:%S")
#initial data loading part ends
par(mfrow=c(1,1), oma=c(1,1,1,1), mar = c(4,4,1,1))
hist(x$V3, main="Global Active Power",xlab="Global Active Power(kilowatts)", col="red")
dev.copy(png,'plot1.png', width=480, height=480)
dev.off()
##initial data loading part
#read given file
x <- read.table("feb_household.txt", header = FALSE, sep = ";")
#convert first column to R date object
x[,1]<-as.Date(x[,1], "%d/%m/%Y")
#read time as R time object along with date
d <- paste(x[,1], x[,2])
d <-strptime(d, "%Y-%m-%d %H:%M:%S")
#adding empty column
x[,"datetime"]<- NA
#one shot to skip line 6,7
x$datetime <- strptime(paste(x[,1],x[,2]), "%Y-%m-%d %H:%M:%S")
#initial data loading part ends
par(mfrow=c(1,1), oma=c(1,1,1,1), mar = c(2,4,1,1))
#Empty plot
plot(x[,10], x[,3], type="n", ylab="Global Active Power (kilowatts)", xlab="")
#plot points
lines(x[,10], x[,3])
dev.copy(png,'plot2.png', width=480, height=480)
dev.off()
##initial data loading part
#read given file
x <- read.table("feb_household.txt", header = FALSE, sep = ";")
#convert first column to R date object
x[,1]<-as.Date(x[,1], "%d/%m/%Y")
#read time as R time object along with date
d <- paste(x[,1], x[,2])
d <-strptime(d, "%Y-%m-%d %H:%M:%S")
#adding empty column
x[,"datetime"]<- NA
#one shot to skip line 6,7
x$datetime <- strptime(paste(x[,1],x[,2]), "%Y-%m-%d %H:%M:%S")
#initial data loading part ends
par(mfrow=c(1,1), oma=c(1,1,1,1), mar = c(1,4,1,1))
#plot empty area
plot(x[,10], x[,7], type="n", ylab="Energy sub metering", xlab="")
#post datale
lines(x[,10], x[,7])
lines(x[,10], x[,8], col = "red")
lines(x[,10], x[,9], col = "blue")
#draw legend
legend("topright",lty=1,col= c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.copy(png,'plot3.png', width=480, height=480, res=60)
dev.off()
x<-rnorm(1100, mean=1100, sd=75)
x
x.sorted <- sort(x)
plot(x.sorted)
y<-seq(-4, 4, length=100)*75 + 1100
x<-dnorm(100, 1100, 75)
plot(x, y)
plot(y, x, type="n", xlab="IQ Values", ylab="",
main="Normal Distribution", axes=FALSE)
x
y
x<-rnorm(100, mean=1100, sd=75)
plot(y, x, type="n", xlab="IQ Values", ylab="",
main="Normal Distribution", axes=FALSE)
y
x
setwd("/Users/sachinbhatt/dev/git/datascience/airline/chunks")
airline <- read.table("airline_aa", header=FALSE, sep="\t")
head(airline)
datetimes = strptime("200810", format='%Y%m')
datetimes
datetimes <- strptime("200810", format='%Y%m')
datetimes
as.Date('200810', format='%Y%m')
as.Date('2008101', format='%Y%m%d')
as.Date('200810', format='%Y%m%d')
airline$V9
merge(airline$V9, "01")
head(airline)
airline$v5/airline$v6
airline$V5/airline$V6
(airline$V5/airline$V6)*100
plot((airline$V5/airline$V6)*100, type="o", col="blue")
plot((airline$V5/airline$V6)*100, pch=20, col="blue")
savehistory("~/dev/git/datascience/airline/scripts.Rhistory")
getwd()
setwd("/Users/sachinbhatt/dev/git/RepData_PeerAssessment1")
ls()
activity <- data.table("activity.csv", sep=",", header=TRUE)
activity <- read.table("activity.csv", sep=",", header=TRUE)
head(activity)
activity$steps
summary(activity)
head(activity)
as.Date(activity$date, format="%Y-%m-%d")
head(activity)
activity$date <- as.Date(activity$date, format="%Y-%m-%d")
head(activity)
type(activity)
typeof(activity)
typeof(activity$date)
library(data.table)
DT <- data.table(activity)
DT
DT[, sum(steps), by=date]
DT[is.na(d)]
DT[is.na(steps)]
DT[is.na(steps)] <- 0
DT
System.time(DT[, sum(steps), by=date])
DT[, sum(steps), by=date]
hist(DT[, sum(steps), by=date])
DT[, sum(steps), by=date]
DT[, sum(steps), by=date]$V1
hist(DT[, sum(steps), by=date]$V1)
plot(DT[, sum(steps), by=date]$V1, DT[, sum(steps), by=date]$date, type='s')
plot(DT[, sum(steps), by=date]$V1, DT[, sum(steps), by=date]$date, type='h')
plot(DT[, sum(steps), by=date]$date, DT[, sum(steps), by=date]$V1, type='h')
?hist
hist(DT[, sum(steps), by=date]$V1, breaks=DT[, sum(steps), by=date]$date)
DT[, sum(steps), by=date]$date
DT[, sum(steps), by=date]
hist(DT[, sum(steps), by=date])
gplot(DT[, sum(steps), by=date])
library(gplot)
?gplot
ggplot?
;
?ggplot
library(ggplot)
plot(DT[, sum(steps), by=date])
plot(DT[1:, sum(steps), by=date])
DT
head(activity)
DT <- data.table(activity)
head(DT)
DT[is.na(date)]
DT[is.na(steps)]
plot(DT[, sum(steps), by=date])
plot(DT[, sum(steps), by=date], main="Number of steps everyday", xlab="date", ylab="steps")
DT[, mean(steps), by=date]
DT[, mean(steps), by=date, na.rm=TRUE]
DT[, mean(steps, na.rm=TRUE), by=date]
DT[, mean(steps, na.omit=TRUE), by=date]
DT[, mean(steps, na.rm=TRUE), by=date]
DT[, mean(steps, na.rm = TRUE), by=date]
DT[, median(steps, na.rm = TRUE), by=date]
DT[, median(steps), by=date]
DT[, median(steps, na.rm = TRUE), by=date]
median(DT$steps)
median(DT$steps, na.rm = TRUE)
DT$steps
median(DT$steps, na.rm = TRUE)
median(DT$steps, rm.na = TRUE)
median(DT$steps, na.rm = TRUE)
median(DT$steps, na.rm = FALSE)
mean(DT$steps, na.rm = TRUE)
DT[, median(steps, na.rm = TRUE), by=date]
DT[, as.double(median(steps, na.rm = TRUE)), by=date]
savehistory("~/dev/git/RepData_PeerAssessment1/Initial.Rhistory")
savehistory("~/dev/git/RepData_PeerAssessment1/Initial.Rhistory")
savehistory("~/Desktop/Initial.Rhistory")
DT
DT[, mean(steps , na.rm = TRUE), by=interval]
plot(DT[, mean(steps , na.rm = TRUE), by=interval], type="1")
plot(DT[, mean(steps , na.rm = TRUE), by=interval], type="I")
plot(DT[, mean(steps , na.rm = TRUE), by=interval], type="|")
plot(DT[, mean(steps , na.rm = TRUE), by=interval])
plot(DT[, mean(steps , na.rm = TRUE), by=interval], type='1')
plot(DT[, mean(steps , na.rm = TRUE), by=interval], type='l')
plot(DT[, mean(steps , na.rm = TRUE), by=interval], type='p')
plot(DT[, mean(steps , na.rm = TRUE), by=interval], type='o')
plot(DT[, mean(steps , na.rm = TRUE), by=interval], type='b')
plot(DT[, mean(steps , na.rm = TRUE), by=interval], type='c')
plot(DT[, mean(steps , na.rm = TRUE), by=interval], type='s')
plot(DT[, mean(steps , na.rm = TRUE), by=interval], type='l')
plot(DT[, mean(steps , na.rm = TRUE), by=interval], type='s')
plot(DT[, mean(steps , na.rm = TRUE), by=interval], type='h')
plot(DT[, mean(steps , na.rm = TRUE), by=interval], type='n')
plot(DT[, mean(steps , na.rm = TRUE), by=interval], type='l')
?cbind
max(DT[, mean(steps , na.rm = TRUE), by=interval])
DT[, mean(steps , na.rm = TRUE), by=interval]
max(DT[, mean(steps , na.rm = TRUE), by=interval]$V1)
which.max(DT[, mean(steps , na.rm = TRUE), by=interval]$V1)
DT[104,]
DT[, mean(steps , na.rm = TRUE), by=interval][104,]
DT[is.na()]
DT[is.na(steps)]
DT[is.na(interval)]
DT[is.na(date)]
DT[is.na(steps)]
DT[is.na(steps)]$interval
interval_avg <- DT[, mean(steps , na.rm = TRUE), by=interval]
head(interval_avg)
DT[is.na(steps)]$interval
DT[is.na(steps)]
head(interval_avg)
DT[is.na(steps)]
interval_avg[V1,DT[is.na(steps)]$interval]
interval_avg[,DT[is.na(steps)]$interval]
interval_avg[DT[is.na(steps)]$interval]
DT[is.na(steps)]$interval
interval_avg(interval=2350)
interval_avg[interval=2350]
interval_avg[,interval=2350]
interval_avg[,interval_avg$interval=2350]
head(interval_avg)
interval_avg[interval=0]
interval_avg[,interval=0]
typeof(interval_avg)
interval_avg[1]
interval_avg[2]
interval_avg[2,V1]
interval_avg[interval=2,V1]
interval_avg["interval"=2,V1]
interval_avg[interval_avg$interval=2,V1]
interval_avg[[:,interval_avg$interval=2],V1]
interval_avg$interval
interval_avg$interval=2
which(interval_avg$interval=2)
which(interval_avg$interval==2)
which(5==interval_avg$interval)
which(10==interval_avg$interval)
which(interval_avg$interval==105)
which(interval_avg$interval==5)
which(interval_avg$interval==10)
interval_avg$interval
interval_avg <- DT[, mean(steps , na.rm = TRUE), by=interval]
which(interval_avg$interval==10)
which(interval_avg$interval==10)[1]
interval_avg[which(interval_avg$interval==10)[1], V1]
interval_avg[which(interval_avg$interval==DT[is.na(steps)]$interval)[1], V1]
DT[is.na(steps)]
DT[steps]
DT[, steps]
na.locf(DT[, steps])
DT
DT[is.na(steps)]
DT[is.na(steps)]$interval
typeof(DT)
m <- matrix(c(1:10, 11:20), nrow = 10, ncol = 2)
m
apply(m, 1, mean)
apply(m, 2, mean)
apply(m, 1, function(x) cat(x))
apply(m, 1, function(x) cat(x))
apply(m, 1, function(x) cat(x) x+1)
apply(m, 1, function(x) x+1)
apply(m, 1, function(x) m(x))
apply(m, 1, function(x) m[x])
m[1]
m[12]
DT[1]
apply(m, 1, function(x) DT[x])
apply(m, 1, function(x) m[x]+m[x-1])
apply(m, 1, function(x) (m[x]+m[x-1]+m[x+2])/2)
DT
lapply(DT[is.na(steps)], function(x)(cat(x)))
lapply(DT, function(x)(cat(x)))
DT
lapply(DT$steps, function(x)(cat(x)))
DT
interval_avg
lapply(DT[is.na(steps)], function(x)(cat(x)))
lapply(DT[is.na(steps)]$steps, function(x)(cat(x)))
lapply(DT[is.na(steps)]$steps, function(x)(which(interval_avg[which(interval_avg$interval==x)]))
)
lapply(DT[is.na(steps)]$steps, function(x)(interval_avg[x]))
interval_avg[2304]
interval_avg
interval_avg[interval==2304]
interval_avg[interval==2345]
lapply(DT[is.na(steps)]$steps, function(x)(interval_avg[interval==x]$V1))
lapply(DT[is.na(steps)]$interval, function(x)(interval_avg[interval==x]$V1))
missing_val <- lapply(DT[is.na(steps)]$interval, function(x)(interval_avg[interval==x]$V1))
missing_val
MT <- DT
MT
MT[is.na(steps)]
MT[is.na(steps)]$steps
MT[is.na(steps)]$steps <- missing_val
MT <- DT
MT
lapply(MT[is.na(steps)], function(x)cat(x))
lapply(MT[is.na(steps)], function(x)cat(x$steps))
lapply(MT[is.na(steps)]$steps, function(x)cat(x))
lapply(MT[is.na(steps)]$steps, function(x) x<- missing_val[x])
MT
missing_val[DT[is.na(steps)]]
missing_val[DT[is.na(steps)]$steps]
typeof(MT[is.na(steps)])
typeof(MT[is.na(steps)]$steps)
typeof(missing_val)
MT
MT[is.na(steps)] <-missing_val
MT
MT <- DT
MT
lapply(MT[is.na(steps)]$steps, function(x)cat(x))
lapply(MT[is.na(steps)]$steps, function(x)cat(x[1]))
lapply(MT[is.na(steps)]$steps, function(x)cat(x[2]))
lapply(MT[is.na(steps)]$steps, function(x)cat(MT[is.na(steps)][x]))
lapply(MT[is.na(steps)]$steps, function(x)cat(MT[is.na(steps)]))
lapply(MT[is.na(steps)]$steps, function(x)MT[is.na(steps)][x])
lapply(MT[is.na(steps)], function(x)MT[is.na(steps)][x])
MT[is.na(steps)]
MT[is.na(steps)].steps
MT[is.na(steps)]$steps
missing_val[2304]
MT[is.na(steps)]$steps
MT[is.na(steps)]$steps <- missing_val
MT
DT
MT
MT[, mean(steps , na.rm = TRUE), by=interval]
plot(MT[, mean(steps , na.rm = TRUE), by=interval], type='l')
plot(MT[, mean(steps), by=interval], type='l')
plot(DT[, mean(steps , na.rm = TRUE), by=interval], type='l')
plot(MT[, mean(steps), by=interval], type='l')
DT
MT
interval_avg
MT
weekdays(MT$date)
weekdays(MT$date)=="Sunday"
weekdays(MT$date) in "Sunday"
weekdays(MT$date) %in% c('Sunday')
weekdays(MT$date) %in% c('Sunday', 'Saturday')
MT[weekdays(date) %in% c('Sunday', 'Saturday')]
MT_WEEKEND <- MT[weekdays(date) %in% c('Sunday', 'Saturday')]
MT-WEEKEND
MT_WEEKEND
MT[!weekdays(date) %in% c('Sunday', 'Saturday')]
MT_WEEKDAY<-MT[!weekdays(date) %in% c('Sunday', 'Saturday')]
par(mfrow=c(2,1))
plot(MT_WEEKDAY[, mean(steps), by=interval], type='l')
plot(MT_WEEKEND[, mean(steps), by=interval], type='l')
savehistory("~/dev/git/RepData_PeerAssessment1/query.Rhistory")
